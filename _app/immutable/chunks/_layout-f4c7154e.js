const f=!0,l=async({fetch:c})=>{let t=[],m=[],a=[];return(await(await c("/data.json")).json()).processorFamilies.forEach(s=>{const n={name:s.name,shortName:s.shortName,minEntitlement:s.minEntitlement};t.push(n),s.models.forEach(o=>{const r={name:o.name,type:o.type,model:o.model,processorFamily:n};m.push(r),o.processors.forEach(e=>{const i={id:`${r.type}_${r.model}_${e.name}`,name:e.name,model:r,modelName:`${r.name} (${r.type}-${r.model})`,cpw:e.cpw===void 0?void 0:BigInt(e.cpw),cores:e.maxSockets*e.coresPerSocket,baseFrequency:e.baseFrequency,maxFrequency:e.maxFrequency,minSockets:e.minSockets,maxSockets:e.maxSockets,coresPerSocket:e.coresPerSocket,stRperf:e.stRperf,smt2Rperf:e.smt2Rperf,smt4Rperf:e.smt4Rperf,smt8Rperf:e.smt8Rperf,rperf:e.smt8Rperf?e.smt8Rperf:e.smt4Rperf,maxCoresPerIbmiLpar:e.maxCoresPerIbmiLpar,maxAixIbmiCorePercent:e.maxAixIbmiCorePercent,viosOnlyIbmi:e.viosOnlyIbmi===!0,ibmiTier:e.ibmiTier};a.push(i)})})}),{processorFamilies:t,models:m,processors:a}},p=Object.freeze(Object.defineProperty({__proto__:null,prerender:!0,load:l},Symbol.toStringTag,{value:"Module"}));export{p as _,l,f as p};
